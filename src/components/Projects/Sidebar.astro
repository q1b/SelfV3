---
import SubItem from "./subItem.astro"
const {content} = Astro.props;
const headers = content.astro?.headers;
const visualClasses = "text-slate-700 font-jetMono truncate pl-1 py-0.5 rounded-md duration-300"
const shadowClasses = " before:shadow-md before:absolute before:inset-0 before:duration-700  before:rounded-md before:opacity-30 before:transition-opacity before:ease-in-out"
const listClasses = visualClasses+shadowClasses;
function returnArrows(type){
  let tempObj = {}
  while(true){
    for (let index = 0; index < headers.length; index) {
      let header = headers[index];
      if(header.depth===1){
        let Head1 = header[type] 
        tempObj[Head1] = {};
        index++;
        header = headers[index];
        while( index < headers.length && header.depth!==1 )     {
            let Head2 = header[type];
            tempObj[Head1][Head2] = {};
            index++;
            header =  headers[index];
        }
      }
    }
    return tempObj;
  }
}
let arrowDepthHeadings = returnArrows("text");
let arrowDepthSlug = returnArrows("slug");
---
<ul class='p-2 flex flex-col gap-y-2'>
  {Object.keys(arrowDepthHeadings).map((i,index)=>(
    <li class='flex flex-col relative' >
      <a href={'#'+Object.keys(arrowDepthSlug)[index]} class="relative" >
      <p id={Object.keys(arrowDepthSlug)[index]+'-link'} class={listClasses} > {index+1}. {i} </p></a>
      {
        Object.keys(arrowDepthHeadings[i]).length===0 ? null : (
          <ul class='pl-1 pt-2 flex flex-col relative gap-y-2'>
            {Object.keys(arrowDepthHeadings[i]).map((j,jIndex)=>(<SubItem uid={Object.keys(Object.values(arrowDepthSlug)[index])[jIndex]+'-link'} link={'#'+Object.keys(Object.values(arrowDepthSlug)[index])[jIndex]} title={`${jIndex+1}. ${j}`} ></SubItem>))}
          </ul>
        )
      }
  </li>
  ))}
</ul>
<!--script define:vars={{headers}}>
let HeaderElements = [];

let intersectingH1Element;
let intersectingH2Element;

const activeClassH1 = ["text-blue-500","border-l-2","border-blue-400","before:opacity-100"];
const activeClassH2 = ["text-blue-400","border-l-2","border-blue-400","before:opacity-100"];

const inActiveClassH1 = ["text-slate-700","before:opacity-30"];
const inActiveClassH2 = ["text-slate-400","before:opacity-30"];

if(window.innerWidth>=764){
window.addEventListener('DOMContentLoaded',()=>{
  for (let index = 0; index < headers.length; index++) {
    let HeaderElement = {
      link:document.getElementById(headers[index]['slug']+'-link'),
      ele:document.getElementById(headers[index]['slug'])
    };
    HeaderElements = [...HeaderElements,HeaderElement];
  };
  let observer = new IntersectionObserver((entries, observer)=>{
      for (let index = 0; index < entries.length; index++) {
        let element = entries[index];
        if( element.isIntersecting ) {
          if( element.target.tagName==='H1' ) {
            document.getElementById(element.target.id+'-link').classList.remove(...inActiveClassH1);
            document.getElementById(element.target.id+'-link').classList.add(...activeClassH1);
            if( intersectingH1Element !== undefined ){
              document.getElementById(intersectingH1Element.id+'-link').classList.add(...inActiveClassH1);
              document.getElementById(intersectingH1Element.id+'-link').classList.remove(...activeClassH1);
              if(intersectingH2Element !== undefined){
                document.getElementById(intersectingH2Element.id+'-link').classList.add(...inActiveClassH2);
                document.getElementById(intersectingH2Element.id+'-link').classList.remove(...activeClassH2);
              }
            }
            intersectingH1Element = element.target
          }
          else {
            document.getElementById(element.target.id+'-link').classList.remove(...inActiveClassH2);
            document.getElementById(element.target.id+'-link').classList.add(...activeClassH2);
            if( intersectingH2Element !== undefined ){
              document.getElementById(intersectingH2Element.id+'-link').classList.add(...inActiveClassH2);
              document.getElementById(intersectingH2Element.id+'-link').classList.remove(...activeClassH2);
            }
            intersectingH2Element = element.target;
          }
        }
      }
    },
    {
      root: document.getElementById('docsScrollArea'),
      rootMargin:'0px',
      threshold:[0,1]
    }
  );
  HeaderElements.forEach((e)=>{
    observer.observe(e.ele);
  });
})
}
</script-->