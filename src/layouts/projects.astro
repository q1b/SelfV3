---
import Head from "../components/INDEX/Header/Head.astro"
import ThemeBtn from "../components/INDEX/Header/ThemeBtn.astro"
import NavBtn from "../components/INDEX/Header/NavBtn.astro"
import SideBar from "../components/Projects/Sidebar.astro"
const {content} = Astro.props
const headers = content.astro?.headers;
// const content = Astro.fetchContent("../pages/markdown.md");
---
<!DOCTYPE html>
<html lang="en">
<head>
  <Head isMarkdown={true} />
</head>
<body>
  <section class="relative p-2 bg-white dark:bg-slate-1000 transition-colors grid gap-x-4 grid-cols-12 w-full h-screen max-h-screen">
    <NavBtn clx="md:hidden absolute bottom-6 right-6" />   
    <aside id="SideBarContainer" class="md:col-span-3 lg:col-span-2 hidden col-span-full -translate-x-full sm:translate-x-0 md:block bg-transparent rounded-lg overflow-y-auto">
      <SideBar content={content}  />
    </aside>
    <main id="docsScrollArea" class="project-scrollbar relative prose prose-sm sm:prose md:prose-lg lg:prose-xl p-6 bg-slate-100 overflow-y-scroll border dark:border-slate-800 dark:prose-theme-slate col-start-1 md:col-start-4 lg:col-start-3 col-end-13 dark:bg-slate-900 rounded-lg transition-colors duration-200">
      <ThemeBtn clx="absolute right-4 top-4" />
      <slot/>
    </main>
  </section>
  <script define:vars={{headers}} >
  let intersectingH1Element;
  let intersectingH2Element;
  let observer;
  const activeClassH1 = ["text-blue-500","border-l-2","border-blue-400","before:opacity-100"];
  const activeClassH2 = ["text-blue-400","border-l-2","border-blue-400","before:opacity-100"];

  const inActiveClassH1 = ["text-slate-700","before:opacity-30"];
  const inActiveClassH2 = ["text-slate-400","before:opacity-30"];

    observer = new IntersectionObserver((entries, observer)=>{
      for (let index = 0; index < entries.length; index++) {
          let element = entries[index];
          if( element.isIntersecting ) {
            if( element.target.tagName==='H1' ) {
              document.getElementById(element.target.id+'-link').classList.remove(...inActiveClassH1);
              document.getElementById(element.target.id+'-link').classList.add(...activeClassH1);
              if( intersectingH1Element !== undefined ){
                document.getElementById(intersectingH1Element.id+'-link').classList.add(...inActiveClassH1);
                document.getElementById(intersectingH1Element.id+'-link').classList.remove(...activeClassH1);
                if(intersectingH2Element !== undefined){
                  document.getElementById(intersectingH2Element.id+'-link').classList.add(...inActiveClassH2);
                  document.getElementById(intersectingH2Element.id+'-link').classList.remove(...activeClassH2);
                }
              }
              intersectingH1Element = element.target
            }
            else {
              document.getElementById(element.target.id+'-link').classList.remove(...inActiveClassH2);
              document.getElementById(element.target.id+'-link').classList.add(...activeClassH2);
              if( intersectingH2Element !== undefined ){
                document.getElementById(intersectingH2Element.id+'-link').classList.add(...inActiveClassH2);
                document.getElementById(intersectingH2Element.id+'-link').classList.remove(...activeClassH2);
              }
              intersectingH2Element = element.target;
            }
          }
        }
      },
      {
        root: document.getElementById('docsScrollArea'),
        rootMargin:'0px',
        threshold:0
      }
    );
    for (let index = 0; index < headers.length; index++) {
      observer.observe(document.getElementById(headers[index]['slug']));
    }
  </script>
<script type="module" >
  import { Rive, Layout, Fit, Alignment } from "rive-js";

const button = document.getElementById("toggle");

function updateCanvas(element, width, height) {
  const ratio = Math.ceil(window.devicePixelRatio);
  let canvas = element;
  canvas.width = width * ratio;
  canvas.height = height * ratio;
  canvas.style.width = `${width}px`;
  canvas.style.height = `${height}px`;
  canvas.getContext("2d").setTransform(ratio, 0, 0, ratio, 0, 0);
}

let layout = new Layout({
  fit: Fit.Contain,
  alignment: Alignment.Center,
});

const r = new Rive({
  src: "/assets/main.riv",
  canvas: document.getElementById("themeSwitchButton"),
  autoplay: true,
  artboard: "SunToMoon",
  layout: layout,
  stateMachines: "Toggle",
  onLoad: (_) => {
    updateCanvas(document.getElementById("themeSwitchButton"), 39, 39);
    if (localStorage.theme === "dark") {
      r.stateMachineInputs("Toggle")[0].value = true;
    } else {
      r.stateMachineInputs("Toggle")[0].value = false;
    }
    button.onclick = () => {
      if (!r.stateMachineInputs("Toggle")[0].value) {
        document.documentElement.classList.add("dark");
        localStorage.theme = "dark";
        r.stateMachineInputs("Toggle")[0].value =
          !r.stateMachineInputs("Toggle")[0].value;
      } else {
        document.documentElement.classList.remove("dark");
        localStorage.theme = "light";
        r.stateMachineInputs("Toggle")[0].value =
          !r.stateMachineInputs("Toggle")[0].value;
      }
    };
  },
});

const navSwitchButton = document.querySelector("#navSwitchButton");
const nav = new Rive({
  src: "/assets/main.riv",
  canvas: document.querySelector("#navswitch"),
  autoplay: true,
  artboard: "Nav",
  stateMachines: "switch",
  onLoad: (_) => {
    updateCanvas(document.getElementById("navswitch"), 48, 36);
    navSwitchButton.onclick = () => {
      nav.stateMachineInputs("switch")[0].fire();
    };
  },
});

const SideBarContainer = document.getElementById("SideBarContainer");
const DocsScrollArea = document.getElementById("docsScrollArea");

navSwitchButton.addEventListener("click", () => {
  if (DocsScrollArea.classList.contains("hidden")) {
    SideBarContainer.animate(
      {
        transform: ["translateX(0)", "translateX(-100%)"],
        opacity: [1, 0],
      },
      {
        fill: "forwards",
        duration: 500,
      },
    ).onfinish = function () {
      DocsScrollArea.classList.remove("hidden");
      SideBarContainer.classList.add("hidden");
      DocsScrollArea.animate(
        {
          transform: ["translateX(-100px)", "translateX(0)"],
          opacity: [0, 1],
        },
        {
          fill: "forwards",
          duration: 500,
        },
      );
    };
  } else {
    DocsScrollArea.animate(
      {
        transform: ["translateX(0px)", "translateX(-100%)"],
        opacity: [1, 0],
      },
      500,
    ).onfinish = function () {
      DocsScrollArea.classList.add("hidden");
      SideBarContainer.classList.remove("hidden");
      SideBarContainer.animate(
        {
          transform: ["translateX(-100%)", "translateX(0)"],
          opacity: [0, 1],
        },
        {
          fill: "forwards",
          duration: 500,
        },
      );
    };
  }
});

  </script>
</body>
</html>